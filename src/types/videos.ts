export interface Video {
  title: string;
  youtubeId: string;
  repoPath: string;
  description: string; 
}

export const videos: Video[] = [
  // Ejemplo: actualiza estos objetos con tus datos reales de la playlist
  {
    title: 'üöÄ Introducci√≥n a Go: ¬øQu√© es Go y por qu√© aprenderlo? ',
    youtubeId: 'U-BfNz6ISdw',
    repoPath: '',
    description: 'Bienvenido al primer video del curso de Go. En esta introducci√≥n, descubrir√°s qu√© es Go, por qu√© es tan popular y cu√°les son sus principales ventajas. Tambi√©n te dar√© una visi√≥n general de lo que cubriremos en el curso y c√≥mo puedes aprovechar al m√°ximo este lenguaje de programaci√≥n.'
  },
  {
    title: 'üõ†Ô∏è Instalaci√≥n de Go, Hola Mundo y Configuraci√≥n del Entorno ',
    youtubeId: 'n1tM86Zzbdw',
    repoPath: 'blob/master/guia_instalacion_go.md',
    description: 'En este video, aprender√°s a instalar Go, configurar tu entorno de desarrollo y escribir tu primer programa en Go. Tambi√©n organizaremos el proyecto en paquetes para que est√© listo para los pr√≥ximos videos.'
  },
  {
    title:'üî¢ Tipos de Datos en Go: Declaraci√≥n de Variables y Constantes ',
    youtubeId: '275kxocPtS8',
    repoPath: 'tree/master/fundamentals/data-types.go',
    description: 'En este video, exploraremos las variables y los tipos de datos en Go. Aprender√°s a declarar variables, definir constantes y conocer√°s los tipos de datos m√°s utilizados en Go para escribir c√≥digo m√°s eficiente y seguro.'
  },
  {
    title:'üõ†Ô∏è Custom Types en Go: Creando Tipos de Datos Personalizados ',
    youtubeId: 'tHYCRJMaz7Y',
    repoPath: 'tree/master/fundamentals/custom-types.go',
    description: 'En este video, aprender√°s sobre Custom Types en Go, una poderosa funcionalidad que permite definir tipos de datos personalizados para mejorar la estructura y legibilidad de tu c√≥digo. Veremos c√≥mo declarar tipos personalizados, trabajar con constantes y utilizarlos en funciones.'
  },
  {
    title:'üñ®Ô∏è Salida Formateada en Go: Todo Sobre printf ',
    youtubeId: 'vcMouHIk_R8',
    repoPath: 'tree/master/fundamentals/printf.go',
    description: 'En este video, exploraremos printf en Go, una herramienta clave para formatear texto de manera precisa y profesional. Aprender√°s a usar los principales especificadores de formato para mostrar datos de manera eficiente y alineada en la consola.'
  },
  {
    title: 'üîó Punteros en Go: Conceptos y Ejemplo Pr√°ctico ',
    youtubeId: 'yi7mftzZPNI',
    repoPath: 'tree/master/fundamentals/pointers.go',
    description: 'En este video, exploraremos los apuntadores (punteros) en Go, una herramienta esencial para manejar direcciones de memoria y optimizar tu c√≥digo.'
  },
  {
    title: '‚å®Ô∏è Entrada de Datos en Go: Leer Datos con Scan, Scanln, Scanf y bufio ',
    youtubeId: 'raqsZbDlUCU',
    repoPath: 'tree/master/fundamentals/inputs.go',
    description: 'En este video, aprender√°s c√≥mo leer datos en Go utilizando diferentes m√©todos de entrada. Veremos c√≥mo capturar datos simples, leer l√≠neas completas y manejar formatos espec√≠ficos.'
  },
  {
    title: 'üîÑ Generics en Go: Funciones y Tipos Gen√©ricos ',
    youtubeId: 'b4eqRCfKg6c',
    repoPath: 'tree/master/fundamentals/generics.go',
    description: 'En este video, exploraremos Generics en Go, una funcionalidad introducida en Go 1.18 que permite escribir funciones y estructuras reutilizables sin necesidad de duplicar c√≥digo.'
  },
  {
    title: 'üèÜ Reto #1 en Go: Registro de Usuario con Entrada y Formateo ',
    youtubeId: '1UOg2r0BZXs',
    repoPath: 'tree/master/exercises/challenge01.go',
    description: '¬°Es hora de poner en pr√°ctica lo aprendido! En este primer reto de programaci√≥n en Go, crearemos un registro de usuario donde el programa capturar√° y mostrar√° los datos de forma organizada.'
  },
  {
    title: 'üèÜ Reto #2 en Go: Promedios con Generics y Tipos Personalizados ',
    youtubeId: 'URdqtCTfYd4',
    repoPath: 'tree/master/exercises/challenge02.go',
    description: 'En este segundo reto pr√°ctico, combinamos dos conceptos fundamentales de Go: tipos personalizados (type) y funciones gen√©ricas (generics). Vamos a construir una funci√≥n que calcule promedios y utilizar un tipo personalizado para representar calificaciones. ¬°Ideal para reforzar lo aprendido!'
  },
  {
    title: 'üîÄ Condicionales en Go: Estructuras de Control (Selecci√≥n) ',
    youtubeId: '--sp1XBXSHI',
    repoPath: 'tree/master/flow_control/selection.go',
    description: 'En este video, exploraremos las estructuras de control en Go enfocadas en las condicionales y la selecci√≥n. Aprender√°s a utilizar bloques condicionales con if-else.'
  },
  {
    title: 'üéØ Switch en Go: Control de Flujo con Casos M√∫ltiples üö¶',
    youtubeId: 'Teku56BqTJ4',
    repoPath: 'tree/master/flow_control/selection.go',
    description: 'En este video aprender√°s a dominar el uso de la estructura switch en Go. Es una forma limpia y poderosa de manejar m√∫ltiples condiciones sin escribir muchos if-else. Veremos ejemplos pr√°cticos como identificar el d√≠a de la semana o detectar vocales.'
  },
  {
    title: 'üìå Calcula tu IMC y Peso Ideal con Go! ',
    youtubeId: 'gafYwDD0lfI',
    repoPath: 'tree/master/exercises/imc.go',
    description: 'En este video, aprender√°s a programar un algoritmo para calcular el √çndice de Masa Corporal (IMC) y determinar tu peso ideal seg√∫n la OMS.'
  },
  {
    title: 'üîÅ Bucles en Go: for, while, range, break y continue ',
    youtubeId: 'vhtuveKqwdY',
    repoPath: 'tree/master/flow_control/iterators.go',
    description: 'En este video aprender√°s a utilizar los diferentes tipos de bucles en Go para controlar el flujo de tus programas. Veremos el uso de for tradicional, for tipo while, range, y las instrucciones break y continue. Todo con ejemplos pr√°cticos que te ayudar√°n a dominar las iteraciones en Go.'
  },
  {
    title: 'üèÜ Reto #3 en Go: Juego de adivinar el n√∫mero üïπÔ∏è',
    youtubeId: 'GoWZ0-ndJ7c',
    repoPath: 'tree/master/exercises/challenge03.go',
    description: 'En este reto pondr√°s en pr√°ctica lo aprendido sobre bucles, condicionales y n√∫meros aleatorios en Go creando un divertido juego de adivinanzas. El usuario deber√° adivinar un n√∫mero entre 1 y 100 con un n√∫mero limitado de intentos. ¬øSer√°s capaz de lograrlo?'
  },
  {
    title: '‚öôÔ∏è Funciones en Go: Par√°metros, Retorno de Valores y Par√°metros Variables ',
    youtubeId: 'bPT3mp1j3r0',
    repoPath: 'tree/master/functions',
    description: 'En este video aprender√°s todo lo necesario para dominar las funciones en Go, desde las m√°s simples hasta las m√°s avanzadas. Veremos c√≥mo definir funciones con par√°metros, retornar valores (simples, m√∫ltiples y nombrados) y crear funciones con par√°metros variables (variadic).'
  },
  {
    title: 'üèÜ Reto #4 en Go: ¬øC√≥mo determinar si un n√∫mero es primo?',
    youtubeId: 'CCVj3-JbeVU',
    repoPath: 'tree/master/exercises/challenge04.go',
    description: 'En este reto pondremos en pr√°ctica funciones, condicionales y l√≥gica matem√°tica para determinar si un n√∫mero es primo y generar una lista de todos los n√∫meros primos hasta uno dado. Este es un excelente ejercicio para afianzar el uso de funciones y bucles en Go.'
  },
  {
    title: 'üì¶ Arrays en Go: C√≥mo Usar Arreglos Paso a Paso ',
    youtubeId: 'VU99zN0wQxs',
    repoPath: 'tree/master/data_structure/array.go',
    description: 'En este video aprender√°s a trabajar con arrays en Go de manera clara y sencilla. Ver√°s c√≥mo declararlos, inicializarlos y recorrerlos con un bucle for. Tambi√©n exploraremos c√≥mo Go maneja los tipos de datos cuando usamos arrays.'
  },
  {
    title: 'üî™ Slices en Go: C√≥mo Funcionan, C√≥mo Usarlos y Qu√© los Hace Poderosos ',
    youtubeId: 'wZG2guabcmE',
    repoPath: 'tree/master/data_structure/slice.go',
    description: 'En este video aprender√°s qu√© son los slices en Go, c√≥mo se diferencian de los arrays y por qu√© son una de las estructuras m√°s √∫tiles del lenguaje. Exploramos c√≥mo modificarlos, extenderlos con append, crear sub-slices, y hasta combinarlos usando el operador (...).'
  },
  {
    title: 'üß† ¬øArray o Slice en Go? Entiende la Diferencia de una Vez por Todas ',
    youtubeId: 'JqO8NLYW7ss',
    repoPath: 'tree/master/data_structure/diff.go',
    description: 'En este video exploramos la diferencia fundamental entre arrays y slices en Go: los arrays se pasan por valor, mientras que los slices se pasan por referencia. Ver√°s ejemplos claros que muestran c√≥mo los cambios afectan (o no) a las variables originales.'
  },
  {
    title: 'üó∫Ô∏è Mapas en Go: Clave-Valor, Uso de make, B√∫squeda y Eliminaci√≥n ',
    youtubeId: 'C_8krw3Nr0Y',
    repoPath: 'tree/master/data_structure/map.go',
    description: 'En este video exploramos c√≥mo trabajar con mapas en Go, una estructura clave-valor esencial para el manejo eficiente de datos. Ver√°s c√≥mo usar make, agregar, eliminar, buscar elementos y recorrer un mapa.'
  },
  {
    title: 'üß± Structs en Go: Crea tus propios tipos y m√©todos ',
    youtubeId: 'h2GVNam8KpA',
    repoPath: 'tree/master/types/structs.go',
    description: 'En este video exploramos los structs en Go, una poderosa forma de agrupar datos bajo un mismo tipo. Aprender√°s c√≥mo crear tus propios tipos personalizados, c√≥mo declarar m√©todos que operan sobre ellos y por qu√© es importante el uso de punteros (*) cuando quieres modificar el estado interno del struct.'
  },
  {
    title: 'üß© Interfaces en Go: Polimorfismo y desacoplamiento',
    youtubeId: 'RFCCPJATUnU',
    repoPath: 'tree/master/types/interfaces.go',
    description: 'En este video exploramos el poder de las interfaces en Go. Aprender√°s c√≥mo permiten crear c√≥digo flexible, reutilizable y desacoplado. Ver√°s ejemplos pr√°cticos con luchadores especializados (striker, grappler y all-rounder), demostrando c√≥mo distintos tipos pueden cumplir la misma interfaz sin necesidad de herencia expl√≠cita.'
  },
  
];
